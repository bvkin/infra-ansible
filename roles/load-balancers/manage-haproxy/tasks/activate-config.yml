---

# Use a 'block' to ensure "become: True" for all tasks requiring elevated privileges
- block:

  - name: 'Create remote diriectory for validity checking'
    file:
      path: "{{ temp_new_dir }}"
      state: directory

  - name: 'Copy the HAproxy config files to a temp location for validity checking'
    copy:
      src: "{{ item }}"
      dest: "{{ temp_new_dir }}"
    with_fileglob:
      - "{{ haproxy_temp_dir }}/*"
    notify: 'cleanup temp dir'

  - name: 'Add LB Global file valid file options'
    set_fact:
        valid_file_opts: "{{ valid_file_opts | default('') + ' -f {{ temp_new_dir }}global.cfg' }}"

  - name: 'Add LB Frontends file valid file options'
    set_fact:
        valid_file_opts: "{{ valid_file_opts | default('') + ' -f {{ temp_new_dir }}frontends.cfg' }}"
    when: lb_config.frontends is defined

  - name: 'Add LB Stats file valid file options'
    set_fact:
        valid_file_opts: "{{ valid_file_opts | default('') + ' -f {{ temp_new_dir }}stats.cfg' }}"
    when: lb_config.stats_page is defined

  - name: 'Add LB Backends to valid file options'
    set_fact:
        valid_file_opts: "{{ valid_file_opts + ' -f ' + temp_new_dir + 'backend-' + backend_entry.lb_match_fqdn + '.cfg' }}"
    loop_control:
      loop_var: backend_entry
    loop: "{{ lb_config.lb_entries }}"
    when: lb_config.lb_entries is defined

  - name: 'Check the validity'
    command: 'haproxy -c {{ valid_file_opts }}'
    notify: 'remove tmp new directory'

  - name: 'Copy the HAproxy config files'
    synchronize:
      src: '{{ temp_new_dir }}/'
      dest: '{{ conf_dir }}'
      delete: true
    delegate_to: "{{ inventory_hostname }}"

  - name: 'Convert valid file options into configuration file options'
    set_fact:
      config_file_opts: "{{ valid_file_opts | regex_replace(temp_new_dir, conf_dir)}}"

  - name: 'Edit the HAproxy service file and activate service'
    template:
      src: "{{ service_template | default('haproxy.service.j2') }}"
      dest:  "{{ service_file }}"
    notify: 'reload haproxy'

  - name: 'Open Firewall for LB use (TCP only)'
    firewalld:
      port: "{{ fe.lb_host_port }}/tcp"
      permanent: yes
      state: enabled
      immediate: yes
    loop_control:
      loop_var: fe
    loop: "{{ lb_config.frontends|flatten(levels=1) }}"

  - name: 'Tweak SELinux for LB use (TCP only)'
    seport:
      ports: "{{ fe.lb_host_port }}"
      proto: tcp
      setype: http_port_t
      state: present
    loop_control:
      loop_var: fe
    loop: "{{ lb_config.frontends|flatten(levels=1) }}"

  # End of outer block for "become: True"
  become: True
